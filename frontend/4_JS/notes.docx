Javascript Programming Language Notes

CHAPTER 1
-----------------------------------------------------------------------------------------------------------------------------------------------------
1.      Data Types in JS:
            ->  Primitive Types:
                    i.      Number
                    ii.     Boolean
                    iii.    String
                    iv.     Undefined
                    v.      Null
                    vi.     Bignit (less frequently used)
                    vii.    Symbol (less frequently used)

            ->  typeof a:   returns datatype of the variable.

            i.      Numbers:
                    ->      Positive (14) and Negative (-4)
                    ->      Integers (45, -50)
                    ->      Floating numbers- with decimal (4.6, -8.9)

            ii.     Boolean:
                        ->  represents a truth value-> true or false / yes or no
                                let age= 23;
                                let isAdult= true;

                                let age= 13;
                                let isAdult= false;

            iii.    Undefined:
                        ->  A variable that has not been assigned a value is of type undefined.

            iv.     Null:
                        ->  The null value represents the intentional absence of any object value.
                        ->  To be explicitly assigned.

2.      Operations in JS:
            ->  Modulo (remainder operator)
            ->  Exponentiation (power operator)

3.      NaN in JS:
            ->  The NaN global property is a value representing Not-A-Number.
                e.g.,   0/0, NaN-1, NaN*1, NaN + NaN

4.      Operator Precedence:
            ->  This is the general order of solving an expression.
                (), **, * , / , % , + , -

5.      'let' keyword:
            ->  Syntax of declaring variables.
            ->  Used only once while declaring the variable.
            ->  The value of the variables declared as 'let' can be changed later. 
                e.g., let age = 23;
                      age = age + 1;

                      let cgpa;
                      cgpa = 8.9

                      let num1 = 1;
                      let num2 = 2;
                      let sum = num1 + num2;

6.      'const' keyword:
            ->  Values of constants can't be changed with re-assignment & they can't be re-declared.
            ->  The value of the variables declared as 'const' can not be changed later.
                e.g., const year= 2025;
                      const pi= 3.14;
                      year= 2026; //Error
                      year= year + 1; //Error
                      const g= 9.8;

7.      Assignment Operators in JS:
            e.g.,
                age = age + 1;
                    age += 1;
                age = age - 1;
                    age -= 1;
                age = age * 1;
                    age *= 1;

8.      Unary Operators in JS:
            e.g., age++ and age--
                and, 
                  ++age and --age

            ->  Pre-increment or Pre-decrement: Change then use.
                    let age= 10;
                    let newAge= ++age;  //updates age= 11 and then newAge=11

            ->  Post-increment or Post-decrement: Use then change.
                    let age= 10;
                    let newAge= age++;  //updates newAge= 10 and then age=11 

9.      Identifier Rules: 
            All Javascript variables must be identified with unique names (identifiers.)
                ->  Names can contain letters, digits, underscores, and dollar signs(no space.)
                ->  Names must begin with a letter.
                ->  Names can also begin with $ and _.
                ->  Names are case-sensitive (y and Y are different variables.)
                ->  Reserved words (like JavaScript keywords) cannot be used as Names.

            Way of writing identifiers in JS is camelCase.

10.     Boolean in JS*

11.     WHAT IS TYPESCRIPT?
            ->  Static Typed, where JS is dynamic typed.
            ->  Designed by Mircrosoft.

12.     String in JS:
            ->  Strings are text or sequence of characters.
                    letname = "Tony Stark";
                    let role= "ironman";
                    let char= "a";
                    let num= "23";
                    let empty= "";

            -> Concatenation
                    "tony" + 1 will return "tony1" in js.


CHAPTER 2
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.      console.log():  
            To write (log) a message on the console.
            Used in Javascript files.
            Basically, console.log() is a way to link our javascript file with the browser's console, because our js file and browser are located in different places.

            ->  console.log("Apna College");
            ->  console.log(1234);
            ->  console.log(2+2);
            ->  console.log("Apna", "College", 1234);

2.      Linking JS File:
            <script src="app.js"></script>
            
            ->  Generally, included in the body tag of the html window instead of the head tag.

3.      Template Literals:
            They are used to add embedded expressions in a string.

            let a= 5;
            let b= 10;

            console.log(`Your pay ${a+b} rupees.`);    //note: back ticks are used.

4.      Operators in JS:
            i.      Arithmetic (+, -, /, %, **)
            ii.     Unary (++, --)
            iii.    Assignment (=, +=, -=, *=, /=, % etc.)
            iv.     Comparison (>, >=, <, <=, ==, !=, ===)
            v.      Logical (&&, ||, !)

            ->  Note:   '==' compares value and not type, while '===' compares  type and value.
                            e.g., "123" == 123  will return true.
                                0 == " " will return true.
                                0 == false will return true.
                                null == undefined will return true.

                                While, 
                                    "123" === 123 will return false.
                                    "1" === 1 will return false.
                                    " " === false will return false.
                                    null === undefineed will return false.

5.      Comparison for Non-Numbers:
            ->  'a' > 'A' returns true.
            ->  'a' > 'b' returns false.
            ->  'b' < 'c' returns true.
            ->  'B' < 'C' returns true.
            ->  '*' < '&' returns false. 

6.      Conditional Statements:
            ->  if-else: if, else-if, else
            ->  nested if-else
            ->  switch

7.      Truthy and Falsy:
            Everything in JS is true or false (in boolean context.)

            This doesn't mean their value itself is false or true, but they are treated as false or true if taken in boolean context.

            ->  Falsy Values:
                    false, 0, -0, On (Bignit value), ""(empty string), null, undefined, NaN.

            ->  Truthy Values:
                    Everything else.

8.      Switch Statement:
            Used when we have some fixed values that we need to compare to.

9.      Alert & Prompt:
            Alert displays an alert message on the page.
            
            ->  alert("something went wrong!);

            Prompt displays a dialog box that asks users for some input.
            
            ->  prompt("please enter your roll no.");

            Alert and Prompts pops out on the website.

10.     Error and Warning:
            ->  console.error("Something went wrong! ");
            ->  console.warn("Check your username");


CHAPTER 3
-----------------------------------------------------------------------------------------------------------------------------------------------
1.      Strings:
            Any class's instance has two things:
                ->  Properties
                ->  Methods
                        ->  Format: stringName.method()

            Strings are immutable in JS.
                ->  No changes can be made to strings.
                ->  Whenever we do try to make a change, a new string is created and old one remains same.
            
            Method chaining:
                ->  Using one method after another. Order of execution will be left to right.
                        e.g., str.toUpperCase().trim()

            String methods:
                i.      str.trim(): Trims whitespaces from both ends of string and returns a new one.
                ii.     str.toUpperCase()
                iii.    str.toLowerCase()
                iv.     str.indexOf(arg):   Returns the first index of occurence of some value in string. Or gives -1 if not found.
                v.      str.slice():    Returns a part of the original string as a new string.
                            ->  let str = "I Love Coding";
                            ->  str.slice(5) gives "Coding"
                            ->  str.slice(1,4) gives "love"
                            ->  str.slice(-num) gives str.slice(length-num)
                vi.     replace:    Searches the first occurence of a value in the string and returns a new string with the value replaced.
                            ->  let str = "ILoveCoding";
                            ->  str.replace("love", "do");    //returns 'IdoCoding'
                            ->  str.replace("o", "x");        //returns 'IlxveCoding'
                vii.    repeat:     Returns a string with the number of copies of a string.
                            ->  let str = "Mango";
                            ->  str.repeat(3);      //returns 'MangoMangoMango'

2.      Array (Data Structure):
            ->  Heterogeneous arrays possible in JS.
            ->  Nested Arrays.
            ->  Arrays are mutable in C++.
            ->  Array References:
                        ->      [1] == [1] returns false
                        ->      [1] === [1] returns false
                        ->      Reason: reference in memory i.e., address in memory.
                        ->      let arr = ['a', 'b']
                        ->      let arrCopy = arr;
                        ->      arr == arrCopy returns true.
            ->  Array Methods:
                    i.      push:       add to end.
                    ii.     pop:        delete from end and returns to it.
                    iii.    unshift:    add to start and return index.
                    iv.     shift:      delete from start and returns the element.
                    v.      indexOf:    returns index of array element, if not found returns -1.
                    vi.     includes:   search for a value and returns true/false.
                    vii.    concat:     merge 2 arrays.
                    viii.   reverse:    reverse an array.
                    ix.     slice:      copies a portion of an array.
                                            e.g., let colors = ["red", "yellow", "blue", "orange", "pink", "white"];
                                                    ->  colors.slice() 
                                                            returns ["red", "yellow", "blue", "orange", "pink", "white"]
                                                    ->  colors.slice(2)
                                                            returns ["blue", "orange", "pink", "white"]
                                                    ->  colors.slice(2,3)
                                                            returns["blue"]
                                                    ->  colors.slice(-2)
                                                            returns["pink", "white"]

                    x.      splice:     removes | replaces | add elements in place.
                                        IMP. SPLICE MAKES CHANGES IN THE ORIGINAL ARRAY ITSELF.
                                            e.g., let colors = ["red", "yellow", "blue", "orange", "pink", "white"];
                                                    ->  colors.splice(4);
                                                            colors: ["red", "yellow", "blue", "orange"]
                                                    ->  colors.splice(0,1);
                                                            colors: ["yellow", "blue", "orange"]
                                                    ->  colors.splice(0, 1, "black", "grey");
                                                            colors: ["black", "grey", "blue", "orange"]

                    xi.     sort:       sorts an array. 
                                            Note: We do not use sort method for sorting an array which contains numbers, because by default sort method sorts the elements of an array by converting them first into strings or you can say UTF8 characters. So based on this UTF8 characters then the elements get sorted which might result to unwanted order of sorting of elements.
            ->  Constant Arrays:
                    ->  Syntax: const arr= [1,2,3,4];
                    ->  Operations are still possible in this arr.
                    ->  Changing the address reference of const arr is not possible.


CHAPTER 4
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                


1.      Loops in JS:
                i.      for loop
                ii.     while loop

2.      Loops with Arrays:
                ->      let fruits = ["mango", "apple", "banana", "litchi", "orange"];
                ->      for (let i = 0; i < fruits.length; i++){
                                console.log(i, fruits[i]);
                        }

3.      Loops with Arrays:
                Nested loops with Nested Arrays.

                ->      let heroes = [["ironman", "spiderman", "thor"], ["superman", "wonder woman", "flash"]];
                ->      console.log(`List #${i}`);
                ->      for (let i=0; i < heroes.length; i++){
                                console.log(heroes[i][j]);
                        }

4.      for-of loop in JS:
                Syntax:
                        for(element of collection){
                                //do something
                        }

                ->      let fruits = ["mango", "apple", "banana", "litchi", "orange"];
                        for (fruit of fruits) {
                                console.log(fruit);
                        }

                ->      for(char of "apnacollege"){
                                console.log(char);
                        }

                ->      for-of loop for nested arrays.

CHAPTER 5
------------------------------------------------------------------------------------------


1.      JS Object Literals

        ->      Used to store keyed collections and complex entities.
        ->      property =>     (key,value) pair
        ->      Objects are a collection of properties.
        ->      post request
        ->      get request
        ->      get values:
                        ->      JS automatically converts objects keys to strings.
                        ->      Even if we made the number as a key, the number will be converted to string.
        ->      Add/ Update Value:
                ->      Change the city to "Mumbai"
                ->      Add a new property, gender: "Female"
                ->      Change the marks to "A".
                ->      Deletion:       delete post.date;
        
        ->      Object of Objects:
                ->      Syntax:
                                const classInfo = {
                                        aman: {
                                                grade:  "A+",
                                                city:   "Delhi",
                                        },
                                        shradha: {
                                                grade:  "A",
                                                city:   "Pune",
                                        },
                                        karan: {
                                                grade:  "B+",
                                                city:   "Mumbai",
                                        },
                                }

                ->      Chain rule for access.

        ->      Array of objects:
                ->      Syntax:
                                const classInfo = [
                                        aman: {
                                                grade:  "A+",
                                                city:   "Delhi",
                                        },
                                        shradha: {
                                                grade:  "A",
                                                city:   "Pune",
                                        },
                                        karan: {
                                                grade:  "B+",
                                                city:   "Mumbai",
                                        },
                                ]

2.      Math Object:
        ->      Properties:
                        i.      Math.PI
                        ii.     Math.E
        ->      Methods:
                        i.      Math.abs(n)
                        ii.     Math.obj(a,b)
                        iii.    Math.pow(n)
                        iv.     Math.floor(n):  returns nearest smallest integer value.
                        v.      Math.ceil(n):   returns nearest largest integer value.
                        vi.     Math.random():  returns a random value btw 0 to 1.

CHAPTER 6
-------------------------------------------------------------------------------------------------


1.      Functions:
        ->      syntax:
                        function fName(){
                                //body
                        }
        ->      Function with parameters:
                ->      order matters of arguements.
        ->      Function scopes:
                ->      Scope determines the accessibility of variables, objects, and functions from different parts of the code.
                ->      Function scope:
                        ->      Variables defined inside a function are not accessible (visible) from outside the function.
                ->      Block scope:
                        ->      Variables declared inside a () block cannot be accessed from outside the block.
                ->      Lexical scope:
                        ->      A variable defined outside a function can be accessible inside another function defined after the variable declaration.
                        ->      The opposite is NOT true.
                        ->      Hoisting
                        ->      Nested function scope.

2.      Function Expressions:
        ->      Syntax:
                        const variable = function (arg1, arg2, ...){
                                //do something
                        }

        ->      Example:
                        const sum = function(a,b){
                                return a + b;
                        }

                        console.log(sum(2,3));

3.      Higher Order Functions:
        ->      A function that does one or both:
                ->      takes one or multiple functions as arguements.
                        ->      Example:
                                        function multipleGreet(func, n){
                                                for(let i=1 ; i <= n; i++){
                                                        func();
                                                }
                                        }

                                        let greet = function(){
                                                console.log("hello");
                                        }

                                        multipleGreet(greet, 2);
                ->      returns a function.
                        ->      Example:        
                                        function oddEvenTest (request) {
                                                if(request == "odd"){
                                                        return function (n){
                                                                console.log(!(n % 2 == 0));
                                                        }
                                                }
                                                else if (request == "even"){
                                                        return function (n){
                                                                console.log(n % 2 == 0);
                                                        }
                                                }
                                                else{
                                                        console.log("Wrong request");
                                                }
                                        }
4.      Methods:
        ->      Actions that can be performed on an object.
        ->      Example: dictionary (object literals) + function
                        const calculator = {
                                add: function(a,b){
                                        return a + b;
                                },
                                sub: function(a,b){
                                        return a - b;
                                }
                                mul: function(a,b){
                                        return a * b;
                                }
                        };
        ->      Shorthand for Methods:
                        const calculator = {
                                add(a, b){
                                        return a + b;
                                },
                                sub(a, b){
                                        return a - b;
                                }
                        };
        

CHAPTER 7
----------------------------------------------------------------------------------------------------------


1.      'this' keyword:
        ->      'this' keyword refers to an object that is executing the current piece of code.

2.      try & catch:
        ->      The try statement allows us to define a block of code to be tested for errors while it is being executed.
        ->      The catch statement allows us to define a block of code to be executed, if an error occurs in the try block.
        ->      Example:
                        try{
                                console.log(a);
                        }
                        catch{
                                console.log("variable a doesn't exist)
                        }

3.      Arrow Functions
        ->      Syntax:
                        const func = (arg1, arg2...) => {function definition}
                        const func = (arg1, arg2, ...) => (value)
        ->      Example:
                        const sum = (a, b) => {
                                console.log(a+b)
                        }
        ->      Implicit return: we can remove the 'return' keyword to return an element from an arrow function, the arrow funnction by default will return the object if anything else is not written in its block.
                ->      e.g., const mul = (a, b) => {
                                        a * b;  //arrow func will by default implicitly return this expression
                                }

4.      Set Timeout
        ->      Syntax:
                        setTimeout(function, timeout)
        ->      Example:
                        console.log("hi there");

                        setTimeout( () => {
                                console.log("Ritika Upadhyay");
                        }, 4000);

                        console.log("pardon!");
        ->      setTimeout takes the time in milliseconds i.e., 4s = 4000ms

5.      Callback
        ->      Callback is any function which can be or which is passed as an arguement in any other function i.e., in higher order function.

6.      Set Interval
        ->      setInterval (function, timeout)
        ->      Syntax:
                        setInterval( () => {
                                console.log("Apna College");
                        }, 200);

                        clearInterval(id);

7.      'this' keyword with Arrow function**:
        ->      For arrow functions, the scope of 'this' keyword is lexical scope.
        ->      For normal functions, the scope of 'this' keyword is its calling object.

CHAPTER 8
----------------------------------------------------------------------------------------------------------


1.      Array Methods:
                i.      forEach
                        ->      Syntax: arr.forEach(some function definition or name);
                        ->      Returns elements of the array in iterative lines (similar to for-of loop)

                ii.     map
                        ->      Syntax: let newArr = arr.map(some function definition or name);
                        ->      Performs the operations defined in the functional block on each of the elements of the Array
                        ->      Stores the operated elements into a new array.

                iii.    filter
                        ->      Syntax: let newArr = arr.filter((el) => (el <= 10));
                        ->      Operates on an array, takes each element of the array and compares it with a given condition.
                        ->      If the element passes the condition (returns true) then it stores it into the new array.

                iv.     some
                        ->      Syntax: let newArr = arr.some(el => (el % 10 == 0));
                        ->      Similar to every.
                        ->      Returns true if atleast one element of the array passes the condition.

                v.      every
                        ->      Syntax: arr.every((el) => (el <= 10));
                        ->      Operates on an array, returns true or false if every element of the array returns true or false for the given condition.

                vi.     reduce
                        ->      Syntax: arr.reduce( reducer function with 2 variables for (accumulator, element) );

        ->Note: The above are higher order function which takes functions as an arguement i.e., it takes callback as an arguement.

2.      Default Parameters:
                ->      Giving a default value to the arguements
                ->      Syntax:
                                function func (a, b=2){
                                        //do something
                                }
                ->      Example:
                                function func(a, b=4){
                                        return a + b;
                                }

3.      Spread:
                ->      Expands an iterable into multiple values

                ->      Syntax:
                                function func (...arr) {
                                        //do something
                                }

                ->      With Array Literals
                        ->      Examples:
                                i.      let arr = [1,2,3,4,5];
                                        let newArr = [...arr];
                                        console.log(newArr);
                                        //output- [1,2,3,4,5]

                                ii.     let chars = "Tisha Upadhyay";
                                        let newArr = [...chars];
                                        console.log(newArr);

                                iii.    let arr = [1,3,5,7,9];
                                        let chars = "TishaUpadhyay";
                                        let newArr = [...arr, ...chars];
                                        console.log(newArr);

                ->      Object Literals
                        ->      Examples:
                                i.      let data = {
                                                email: "tisha.u25@gmail.com",
                                                pswd:   "pihuu",
                                        };

                                        let dataCopy = {...data, id: 123};
                                        console.log(dataCopy);

                                ii.     Spread non object literals (arr, str) as object literals
                                        ->      We have the values from the non-obj-literals for the key-value pair for object literals
                                        ->      For key, the indices of the value are the keys for the their corrresponding values.
                                        
4.      Rest:
                ->      Allows a function to take an indefinnite number of arguements and bundle them in an array.
                ->      Example:
                                function sum(...args){
                                        return args.reduce( (add, el) => add + el);
                                }

5.      Destructuring:
                ->      Storing values of array into multiple variables.
                ->      Example:
                        i.      let names = ["tony", "bruce", "steve", "peter"];
                                let [winner, runnerup] = names;
                                console.log(winner, runnerup);  //"tony" "bruce"
                        ii.     let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
                                let [roll1, roll2, ...roll] = arr;
                                console.log(roll1, "\n", "roll2", "\n", roll);











