Javascript Programming Language Notes

CHAPTER 1
-----------------------------------------------------------------------------------------------------------------------------------------------------
1.      Data Types in JS:
            ->  Primitive Types:
                    i.      Number
                    ii.     Boolean
                    iii.    String
                    iv.     Undefined
                    v.      Null
                    vi.     Bignit (less frequently used)
                    vii.    Symbol (less frequently used)

            ->  typeof a:   returns datatype of the variable.

            i.      Numbers:
                    ->      Positive (14) and Negative (-4)
                    ->      Integers (45, -50)
                    ->      Floating numbers- with decimal (4.6, -8.9)

            ii.     Boolean:
                        ->  represents a truth value-> true or false / yes or no
                                let age= 23;
                                let isAdult= true;

                                let age= 13;
                                let isAdult= false;

            iii.    Undefined:
                        ->  A variable that has not been assigned a value is of type undefined.

            iv.     Null:
                        ->  The null value represents the intentional absence of any object value.
                        ->  To be explicitly assigned.

2.      Operations in JS:
            ->  Modulo (remainder operator)
            ->  Exponentiation (power operator)

3.      NaN in JS:
            ->  The NaN global property is a value representing Not-A-Number.
                e.g.,   0/0, NaN-1, NaN*1, NaN + NaN

4.      Operator Precedence:
            ->  This is the general order of solving an expression.
                (), **, * , / , % , + , -

5.      'let' keyword:
            ->  Syntax of declaring variables.
            ->  Used only once while declaring the variable.
            ->  The value of the variables declared as 'let' can be changed later. 
                e.g., let age = 23;
                      age = age + 1;

                      let cgpa;
                      cgpa = 8.9

                      let num1 = 1;
                      let num2 = 2;
                      let sum = num1 + num2;

6.      'const' keyword:
            ->  Values of constants can't be changed with re-assignment & they can't be re-declared.
            ->  The value of the variables declared as 'const' can not be changed later.
                e.g., const year= 2025;
                      const pi= 3.14;
                      year= 2026; //Error
                      year= year + 1; //Error
                      const g= 9.8;

7.      Assignment Operators in JS:
            e.g.,
                age = age + 1;
                    age += 1;
                age = age - 1;
                    age -= 1;
                age = age * 1;
                    age *= 1;

8.      Unary Operators in JS:
            e.g., age++ and age--
                and, 
                  ++age and --age

            ->  Pre-increment or Pre-decrement: Change then use.
                    let age= 10;
                    let newAge= ++age;  //updates age= 11 and then newAge=11

            ->  Post-increment or Post-decrement: Use then change.
                    let age= 10;
                    let newAge= age++;  //updates newAge= 10 and then age=11 

9.      Identifier Rules: 
            All Javascript variables must be identified with unique names (identifiers.)
                ->  Names can contain letters, digits, underscores, and dollar signs(no space.)
                ->  Names must begin with a letter.
                ->  Names can also begin with $ and _.
                ->  Names are case-sensitive (y and Y are different variables.)
                ->  Reserved words (like JavaScript keywords) cannot be used as Names.

            Way of writing identifiers in JS is camelCase.

10.     Boolean in JS*

11.     WHAT IS TYPESCRIPT?
            ->  Static Typed, where JS is dynamic typed.
            ->  Designed by Mircrosoft.

12.     String in JS:
            ->  Strings are text or sequence of characters.
                    letname = "Tony Stark";
                    let role= "ironman";
                    let char= "a";
                    let num= "23";
                    let empty= "";

            -> Concatenation
                    "tony" + 1 will return "tony1" in js.


CHAPTER 2
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.      console.log():  
            To write (log) a message on the console.
            Used in Javascript files.
            Basically, console.log() is a way to link our javascript file with the browser's console, because our js file and browser are located in different places.

            ->  console.log("Apna College");
            ->  console.log(1234);
            ->  console.log(2+2);
            ->  console.log("Apna", "College", 1234);

2.      Linking JS File:
            <script src="app.js"></script>
            
            ->  Generally, included in the body tag of the html window instead of the head tag.

3.      Template Literals:
            They are used to add embedded expressions in a string.

            let a= 5;
            let b= 10;

            console.log(`Your pay ${a+b} rupees.`);    //note: back ticks are used.

4.      Operators in JS:
            i.      Arithmetic (+, -, /, %, **)
            ii.     Unary (++, --)
            iii.    Assignment (=, +=, -=, *=, /=, % etc.)
            iv.     Comparison (>, >=, <, <=, ==, !=, ===)
            v.      Logical (&&, ||, !)

            ->  Note:   '==' compares value and not type, while '===' compares  type and value.
                            e.g., "123" == 123  will return true.
                                0 == " " will return true.
                                0 == false will return true.
                                null == undefined will return true.

                                While, 
                                    "123" === 123 will return false.
                                    "1" === 1 will return false.
                                    " " === false will return false.
                                    null === undefineed will return false.

5.      Comparison for Non-Numbers:
            ->  'a' > 'A' returns true.
            ->  'a' > 'b' returns false.
            ->  'b' < 'c' returns true.
            ->  'B' < 'C' returns true.
            ->  '*' < '&' returns false. 

6.      Conditional Statements:
            ->  if-else: if, else-if, else
            ->  nested if-else
            ->  switch

7.      Truthy and Falsy:
            Everything in JS is true or false (in boolean context.)

            This doesn't mean their value itself is false or true, but they are treated as false or true if taken in boolean context.

            ->  Falsy Values:
                    false, 0, -0, On (Bignit value), ""(empty string), null, undefined, NaN.

            ->  Truthy Values:
                    Everything else.

8.      Switch Statement:
            Used when we have some fixed values that we need to compare to.

9.      Alert & Prompt:
            Alert displays an alert message on the page.
            
            ->  alert("something went wrong!);

            Prompt displays a dialog box that asks users for some input.
            
            ->  prompt("please enter your roll no.");

            Alert and Prompts pops out on the website.

10.     Error and Warning:
            ->  console.error("Something went wrong! ");
            ->  console.warn("Check your username");


CHAPTER 3
-----------------------------------------------------------------------------------------------------------------------------------------------
1.      Strings:
            Any class's instance has two things:
                ->  Properties
                ->  Methods
                        ->  Format: stringName.method()

            Strings are immutable in JS.
                ->  No changes can be made to strings.
                ->  Whenever we do try to make a change, a new string is created and old one remains same.
            
            Method chaining:
                ->  Using one method after another. Order of execution will be left to right.
                        e.g., str.toUpperCase().trim()

            String methods:
                i.      str.trim(): Trims whitespaces from both ends of string and returns a new one.
                ii.     str.toUpperCase()
                iii.    str.toLowerCase()
                iv.     str.indexOf(arg):   Returns the first index of occurence of some value in string. Or gives -1 if not found.
                v.      str.slice():    Returns a part of the original string as a new string.
                            ->  let str = "I Love Coding";
                            ->  str.slice(5) gives "Coding"
                            ->  str.slice(1,4) gives "love"
                            ->  str.slice(-num) gives str.slice(length-num)
                vi.     replace:    Searches the first occurence of a value in the string and returns a new string with the value replaced.
                            ->  let str = "ILoveCoding";
                            ->  str.replace("love", "do");    //returns 'IdoCoding'
                            ->  str.replace("o", "x");        //returns 'IlxveCoding'
                vii.    repeat:     Returns a string with the number of copies of a string.
                            ->  let str = "Mango";
                            ->  str.repeat(3);      //returns 'MangoMangoMango'

2.      Array (Data Structure):
            ->  Heterogeneous arrays possible in JS.
            ->  Nested Arrays.
            ->  Arrays are mutable in C++.
            ->  Array References:
                        ->      [1] == [1] returns false
                        ->      [1] === [1] returns false
                        ->      Reason: reference in memory i.e., address in memory.
                        ->      let arr = ['a', 'b']
                        ->      let arrCopy = arr;
                        ->      arr == arrCopy returns true.
            ->  Array Methods:
                    i.      push:       add to end.
                    ii.     pop:        delete from end and returns to it.
                    iii.    unshift:    add to start and return index.
                    iv.     shift:      delete from start and returns the element.
                    v.      indexOf:    returns index of array element, if not found returns -1.
                    vi.     includes:   search for a value and returns true/false.
                    vii.    concat:     merge 2 arrays.
                    viii.   reverse:    reverse an array.
                    ix.     slice:      copies a portion of an array.
                                            e.g., let colors = ["red", "yellow", "blue", "orange", "pink", "white"];
                                                    ->  colors.slice() 
                                                            returns ["red", "yellow", "blue", "orange", "pink", "white"]
                                                    ->  colors.slice(2)
                                                            returns ["blue", "orange", "pink", "white"]
                                                    ->  colors.slice(2,3)
                                                            returns["blue"]
                                                    ->  colors.slice(-2)
                                                            returns["pink", "white"]

                    x.      splice:     removes | replaces | add elements in place.
                                        IMP. SPLICE MAKES CHANGES IN THE ORIGINAL ARRAY ITSELF.
                                            e.g., let colors = ["red", "yellow", "blue", "orange", "pink", "white"];
                                                    ->  colors.splice(4);
                                                            colors: ["red", "yellow", "blue", "orange"]
                                                    ->  colors.splice(0,1);
                                                            colors: ["yellow", "blue", "orange"]
                                                    ->  colors.splice(0, 1, "black", "grey");
                                                            colors: ["black", "grey", "blue", "orange"]

                    xi.     sort:       sorts an array. 
                                            Note: We do not use sort method for sorting an array which contains numbers, because by default sort method sorts the elements of an array by converting them first into strings or you can say UTF8 characters. So based on this UTF8 characters then the elements get sorted which might result to unwanted order of sorting of elements.
            ->  Constant Arrays:
                    ->  Syntax: const arr= [1,2,3,4];
                    ->  Operations are still possible in this arr.
                    ->  Changing the address reference of const arr is not possible.


CHAPTER 4
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                


1.      Loops in JS:
                i.      for loop
                ii.     while loop

2.      Loops with Arrays:
                ->      let fruits = ["mango", "apple", "banana", "litchi", "orange"];
                ->      for (let i = 0; i < fruits.length; i++){
                                console.log(i, fruits[i]);
                        }

3.      Loops with Arrays:
                Nested loops with Nested Arrays.

                ->      let heroes = [["ironman", "spiderman", "thor"], ["superman", "wonder woman", "flash"]];
                ->      console.log(`List #${i}`);
                ->      for (let i=0; i < heroes.length; i++){
                                console.log(heroes[i][j]);
                        }

4.      for-of loop in JS:
                Syntax:
                        for(element of collection){
                                //do something
                        }

                ->      let fruits = ["mango", "apple", "banana", "litchi", "orange"];
                        for (fruit of fruits) {
                                console.log(fruit);
                        }

                ->      for(char of "apnacollege"){
                                console.log(char);
                        }

                ->      for-of loop for nested arrays.






