Javascript Programming Language Notes

CHAPTER 1
-----------------------------------------------------------------------------------------------------
1.      Data Types in JS:
            ->  Primitive Types:
                    i.      Number
                    ii.     Boolean
                    iii.    String
                    iv.     Undefined
                    v.      Null
                    vi.     Bignit (less frequently used)
                    vii.    Symbol (less frequently used)

            ->  typeof a:   returns datatype of the variable.

            i.      Numbers:
                    ->      Positive (14) and Negative (-4)
                    ->      Integers (45, -50)
                    ->      Floating numbers- with decimal (4.6, -8.9)

            ii.     Boolean:
                        ->  represents a truth value-> true or false / yes or no
                                let age= 23;
                                let isAdult= true;

                                let age= 13;
                                let isAdult= false;

            iii.    Undefined:
                        ->  A variable that has not been assigned a value is of type undefined.

            iv.     Null:
                        ->  The null value represents the intentional absence of any object value.
                        ->  To be explicitly assigned.

2.      Operations in JS:
            ->  Modulo (remainder operator)
            ->  Exponentiation (power operator)

3.      NaN in JS:
            ->  The NaN global property is a value representing Not-A-Number.
                e.g.,   0/0, NaN-1, NaN*1, NaN + NaN

4.      Operator Precedence:
            ->  This is the general order of solving an expression.
                (), **, * , / , % , + , -

5.      'let' keyword:
            ->  Syntax of declaring variables.
            ->  Used only once while declaring the variable.
            ->  The value of the variables declared as 'let' can be changed later. 
                e.g., let age = 23;
                      age = age + 1;

                      let cgpa;
                      cgpa = 8.9

                      let num1 = 1;
                      let num2 = 2;
                      let sum = num1 + num2;

6.      'const' keyword:
            ->  Values of constants can't be changed with re-assignment & they can't be re-declared.
            ->  The value of the variables declared as 'const' can not be changed later.
                e.g., const year= 2025;
                      const pi= 3.14;
                      year= 2026; //Error
                      year= year + 1; //Error
                      const g= 9.8;

7.      Assignment Operators in JS:
            e.g.,
                age = age + 1;
                    age += 1;
                age = age - 1;
                    age -= 1;
                age = age * 1;
                    age *= 1;

8.      Unary Operators in JS:
            e.g., age++ and age--
                and, 
                  ++age and --age

            ->  Pre-increment or Pre-decrement: Change then use.
                    let age= 10;
                    let newAge= ++age;  //updates age= 11 and then newAge=11

            ->  Post-increment or Post-decrement: Use then change.
                    let age= 10;
                    let newAge= age++;  //updates newAge= 10 and then age=11 

9.      Identifier Rules: 
            All Javascript variables must be identified with unique names (identifiers.)
                ->  Names can contain letters, digits, underscores, and dollar signs(no space.)
                ->  Names must begin with a letter.
                ->  Names can also begin with $ and _.
                ->  Names are case-sensitive (y and Y are different variables.)
                ->  Reserved words (like JavaScript keywords) cannot be used as Names.

            Way of writing identifiers in JS is camelCase.

10.     Boolean in JS*

11.     WHAT IS TYPESCRIPT?
            ->  Static Typed, where JS is dynamic typed.
            ->  Designed by Mircrosoft.

12.     String in JS:
            ->  Strings are text or sequence of characters.
                    letname = "Tony Stark";
                    let role= "ironman";
                    let char= "a";
                    let num= "23";
                    let empty= "";

            -> Concatenation
                    "tony" + 1 will return "tony1" in js.


CHAPTER 2
------------------------------------------------------------------------------------------------------------------------

1.      console.log():  
            To write (log) a message on the console.
            Used in Javascript files.
            Basically, console.log() is a way to link our javascript file with the browser's console, because our js file and browser are located in different places.

            ->  console.log("Apna College");
            ->  console.log(1234);
            ->  console.log(2+2);
            ->  console.log("Apna", "College", 1234);

2.      Linking JS File:
            <script src="app.js"></script>
            
            ->  Generally, included in the body tag of the html window instead of the head tag.

3.      Template Literals:
            They are used to add embedded expressions in a string.

            let a= 5;
            let b= 10;

            console.log(`Your pay ${a+b} rupees.`);    //note: back ticks are used.

4.      Operators in JS:
            i.      Arithmetic (+, -, /, %, **)
            ii.     Unary (++, --)
            iii.    Assignment (=, +=, -=, *=, /=, % etc.)
            iv.     Comparison (>, >=, <, <=, ==, !=, ===)
            v.      Logical

            ->  Note:   '==' compares value and not type, while '===' compares  type and value.
                            e.g., "123" == 123  will return true.
                                0 == " " will return true.
                                0 == false will return true.
                                null == undefined will return true.

                                While, 
                                    "123" === 123 will return false.
                                    "1" === 1 will return false.
                                    " " === false will return false.
                                    null === undefineed will return false.

5.      Comparison for Non-Numbers:
            ->  'a' > 'A' returns true.
            ->  'a' > 'b' returns false.
            ->  'b' < 'c' returns true.
            ->  'B' < 'C' returns true.
            ->  '*' < '&' returns false. 

6.      Conditional Statements:
            ->  if-else
            ->  nested if-else
            ->  switch




